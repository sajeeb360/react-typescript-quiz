{"ast":null,"code":"import _toConsumableArray from \"E:\\\\react-typescript-quiz-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"E:\\\\react-typescript-quiz-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\react-typescript-quiz-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:\\\\react-typescript-quiz-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\react-typescript-quiz-app\\\\src\\\\App.tsx\";\nimport * as React from \"react\"; //Import function to fetch data from API\n\nimport { fetchQuestions, Difficulty } from \"./API\"; //Imported Components\n\nimport QuestionCard from \"./components/QuestionCard\"; //Imported Styling\n\nimport { GlobalStyle, Wrapper } from \"./App.styles\"; //import loader image\n\nimport Loader from \"./images/loading.gif\";\nvar TOTAL_QUESTIONS = 10;\nexport default function App() {\n  var _this = this;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      questions = _React$useState4[0],\n      setQuestions = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      number = _React$useState6[0],\n      setNumber = _React$useState6[1];\n\n  var _React$useState7 = React.useState(true),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      gameOver = _React$useState8[0],\n      setGameOver = _React$useState8[1];\n\n  var _React$useState9 = React.useState([]),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      userAnswers = _React$useState10[0],\n      setUserAnswers = _React$useState10[1];\n\n  var _React$useState11 = React.useState(0),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      score = _React$useState12[0],\n      setScore = _React$useState12[1];\n\n  var _React$useState13 = React.useState(false),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      complete = _React$useState14[0],\n      setComplete = _React$useState14[1];\n\n  var _React$useState15 = React.useState(Difficulty.EASY),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      difficulty = _React$useState16[0],\n      setDifficulty = _React$useState16[1];\n\n  var startQuiz = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var new_questions;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setComplete(false);\n              setLoading(true);\n              _context.next = 4;\n              return fetchQuestions(TOTAL_QUESTIONS, difficulty);\n\n            case 4:\n              new_questions = _context.sent;\n              setQuestions(new_questions);\n              setLoading(false);\n              setGameOver(false);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function startQuiz() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var checkAnswer = function checkAnswer(e) {\n    if (!gameOver) {\n      var answer = e.currentTarget.value;\n      var correct = questions[number].correct_answer === answer;\n      if (correct) setScore(function (prev) {\n        return prev + 1;\n      });\n      var answerObject = {\n        question: questions[number].question,\n        correctAnswer: questions[number].correct_answer,\n        answer: answer,\n        correct: correct\n      };\n      setUserAnswers(function (prev) {\n        return [].concat(_toConsumableArray(prev), [answerObject]);\n      });\n    }\n  };\n\n  var handleNext = function handleNext() {\n    if (number < TOTAL_QUESTIONS - 1) setNumber(function (prev) {\n      return prev + 1;\n    });else setComplete(true);\n  };\n\n  var handleDifficulty = function handleDifficulty(e) {\n    setDifficulty(e.target.value);\n  };\n\n  console.log(number);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"React Typescript Quiz\"), complete && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"complete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 22\n    }\n  }, \"Quiz is complete\"), gameOver || complete ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"start\",\n    onClick: startQuiz,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, \"Start Quiz\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, \"Select Difficulty\"), /*#__PURE__*/React.createElement(\"select\", {\n    value: difficulty,\n    onChange: handleDifficulty,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, Object.keys(Difficulty).map(function (key) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: key,\n      value: Difficulty[key],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, key);\n  }))) : null, !gameOver ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"score\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 22\n    }\n  }, \"Score: \", score) : null, loading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: Loader,\n    alt: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 20\n    }\n  }) : null, !loading && !gameOver && !complete && /*#__PURE__*/React.createElement(QuestionCard, {\n    questionNum: number + 1,\n    question: questions[number].question,\n    answers: questions[number].answers,\n    totalQuestions: TOTAL_QUESTIONS,\n    userAnswer: userAnswers ? userAnswers[number] : undefined,\n    callback: checkAnswer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }), !loading && !gameOver && !complete && !!userAnswers[number] && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"next\",\n    onClick: handleNext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"Next Question\")));\n}","map":{"version":3,"sources":["E:/react-typescript-quiz-app/src/App.tsx"],"names":["React","fetchQuestions","Difficulty","QuestionCard","GlobalStyle","Wrapper","Loader","TOTAL_QUESTIONS","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","gameOver","setGameOver","userAnswers","setUserAnswers","score","setScore","complete","setComplete","EASY","difficulty","setDifficulty","startQuiz","new_questions","checkAnswer","e","answer","currentTarget","value","correct","correct_answer","prev","answerObject","question","correctAnswer","handleNext","handleDifficulty","target","console","log","Object","keys","map","key","answers","undefined"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB,C,CAEA;;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA0D,OAA1D,C,CAEA;;AACA,OAAOC,YAAP,MAAyB,2BAAzB,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,cAArC,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,IAAMC,eAAe,GAAG,EAAxB;AASA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,wBAA8BR,KAAK,CAACS,QAAN,CAAwB,KAAxB,CAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AACA,yBAAkCX,KAAK,CAACS,QAAN,CAAgC,EAAhC,CAAlC;AAAA;AAAA,MAAOG,SAAP;AAAA,MAAkBC,YAAlB;;AACA,yBAA4Bb,KAAK,CAACS,QAAN,CAAuB,CAAvB,CAA5B;AAAA;AAAA,MAAOK,MAAP;AAAA,MAAeC,SAAf;;AACA,yBAAgCf,KAAK,CAACS,QAAN,CAAwB,IAAxB,CAAhC;AAAA;AAAA,MAAOO,QAAP;AAAA,MAAiBC,WAAjB;;AACA,yBAAsCjB,KAAK,CAACS,QAAN,CAA+B,EAA/B,CAAtC;AAAA;AAAA,MAAOS,WAAP;AAAA,MAAoBC,cAApB;;AACA,0BAA0BnB,KAAK,CAACS,QAAN,CAAuB,CAAvB,CAA1B;AAAA;AAAA,MAAOW,KAAP;AAAA,MAAcC,QAAd;;AACA,0BAAgCrB,KAAK,CAACS,QAAN,CAAwB,KAAxB,CAAhC;AAAA;AAAA,MAAOa,QAAP;AAAA,MAAiBC,WAAjB;;AACA,0BAAoCvB,KAAK,CAACS,QAAN,CAAeP,UAAU,CAACsB,IAA1B,CAApC;AAAA;AAAA,MAAOC,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAMC,SAAS;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBJ,cAAAA,WAAW,CAAC,KAAD,CAAX;AACAZ,cAAAA,UAAU,CAAC,IAAD,CAAV;AAFgB;AAAA,qBAGYV,cAAc,CAACM,eAAD,EAAkBkB,UAAlB,CAH1B;;AAAA;AAGVG,cAAAA,aAHU;AAIhBf,cAAAA,YAAY,CAACe,aAAD,CAAZ;AACAjB,cAAAA,UAAU,CAAC,KAAD,CAAV;AACAM,cAAAA,WAAW,CAAC,KAAD,CAAX;;AANgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATU,SAAS;AAAA;AAAA;AAAA,KAAf;;AASA,MAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,CAAD,EAA4C;AAC9D,QAAI,CAACd,QAAL,EAAe;AACb,UAAMe,MAAM,GAAGD,CAAC,CAACE,aAAF,CAAgBC,KAA/B;AACA,UAAMC,OAAO,GAAGtB,SAAS,CAACE,MAAD,CAAT,CAAkBqB,cAAlB,KAAqCJ,MAArD;AACA,UAAIG,OAAJ,EAAab,QAAQ,CAAC,UAACe,IAAD;AAAA,eAAUA,IAAI,GAAG,CAAjB;AAAA,OAAD,CAAR;AACb,UAAMC,YAAY,GAAG;AACnBC,QAAAA,QAAQ,EAAE1B,SAAS,CAACE,MAAD,CAAT,CAAkBwB,QADT;AAEnBC,QAAAA,aAAa,EAAE3B,SAAS,CAACE,MAAD,CAAT,CAAkBqB,cAFd;AAGnBJ,QAAAA,MAAM,EAANA,MAHmB;AAInBG,QAAAA,OAAO,EAAPA;AAJmB,OAArB;AAMAf,MAAAA,cAAc,CAAC,UAACiB,IAAD;AAAA,4CAAcA,IAAd,IAAoBC,YAApB;AAAA,OAAD,CAAd;AACD;AACF,GAbD;;AAeA,MAAMG,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,QAAI1B,MAAM,GAAGP,eAAe,GAAG,CAA/B,EAAkCQ,SAAS,CAAC,UAACqB,IAAD;AAAA,aAAUA,IAAI,GAAG,CAAjB;AAAA,KAAD,CAAT,CAAlC,KACKb,WAAW,CAAC,IAAD,CAAX;AACN,GAHD;;AAKA,MAAMkB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACX,CAAD,EAA6C;AACpEJ,IAAAA,aAAa,CAACI,CAAC,CAACY,MAAF,CAAST,KAAV,CAAb;AACD,GAFD;;AAIAU,EAAAA,OAAO,CAACC,GAAR,CAAY9B,MAAZ;AAEA,sBACE,uDACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAEGQ,QAAQ,iBAAI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFf,EAIGN,QAAQ,IAAIM,QAAZ,gBACC,uDACE;AAAQ,IAAA,SAAS,EAAC,OAAlB;AAA0B,IAAA,OAAO,EAAEK,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJF,eAKE;AAAQ,IAAA,KAAK,EAAEF,UAAf;AAA2B,IAAA,QAAQ,EAAEgB,gBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,MAAM,CAACC,IAAP,CAAY5C,UAAZ,EAAwB6C,GAAxB,CAA4B,UAACC,GAAD;AAAA,wBAC3B;AAAQ,MAAA,GAAG,EAAEA,GAAb;AAAkB,MAAA,KAAK,EAAE9C,UAAU,CAAC8C,GAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,GADH,CAD2B;AAAA,GAA5B,CADH,CALF,CADD,GAcG,IAlBN,EAmBG,CAAChC,QAAD,gBAAY;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA6BI,KAA7B,CAAZ,GAAsD,IAnBzD,EAoBGV,OAAO,gBAAG;AAAK,IAAA,GAAG,EAAEJ,MAAV;AAAkB,IAAA,GAAG,EAAC,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAwC,IApBlD,EAqBG,CAACI,OAAD,IAAY,CAACM,QAAb,IAAyB,CAACM,QAA1B,iBACC,oBAAC,YAAD;AACE,IAAA,WAAW,EAAER,MAAM,GAAG,CADxB;AAEE,IAAA,QAAQ,EAAEF,SAAS,CAACE,MAAD,CAAT,CAAkBwB,QAF9B;AAGE,IAAA,OAAO,EAAE1B,SAAS,CAACE,MAAD,CAAT,CAAkBmC,OAH7B;AAIE,IAAA,cAAc,EAAE1C,eAJlB;AAKE,IAAA,UAAU,EAAEW,WAAW,GAAGA,WAAW,CAACJ,MAAD,CAAd,GAAyBoC,SALlD;AAME,IAAA,QAAQ,EAAErB,WANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBJ,EAgCG,CAACnB,OAAD,IAAY,CAACM,QAAb,IAAyB,CAACM,QAA1B,IAAsC,CAAC,CAACJ,WAAW,CAACJ,MAAD,CAAnD,iBACC;AAAQ,IAAA,SAAS,EAAC,MAAlB;AAAyB,IAAA,OAAO,EAAE0B,UAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAjCJ,CAFF,CADF;AA2CD","sourcesContent":["import * as React from \"react\";\r\n\r\n//Import function to fetch data from API\r\nimport { fetchQuestions, Difficulty, QuestionState } from \"./API\";\r\n\r\n//Imported Components\r\nimport QuestionCard from \"./components/QuestionCard\";\r\n\r\n//Imported Styling\r\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\r\n\r\n//import loader image\r\nimport Loader from \"./images/loading.gif\";\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nexport type AnswerObject = {\r\n  question: string;\r\n  correctAnswer: string;\r\n  answer: string;\r\n  correct: boolean;\r\n};\r\n\r\nexport default function App() {\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n  const [questions, setQuestions] = React.useState<QuestionState[]>([]);\r\n  const [number, setNumber] = React.useState<number>(0);\r\n  const [gameOver, setGameOver] = React.useState<boolean>(true);\r\n  const [userAnswers, setUserAnswers] = React.useState<AnswerObject[]>([]);\r\n  const [score, setScore] = React.useState<number>(0);\r\n  const [complete, setComplete] = React.useState<boolean>(false);\r\n  const [difficulty, setDifficulty] = React.useState(Difficulty.EASY);\r\n\r\n  const startQuiz = async () => {\r\n    setComplete(false);\r\n    setLoading(true);\r\n    const new_questions = await fetchQuestions(TOTAL_QUESTIONS, difficulty);\r\n    setQuestions(new_questions);\r\n    setLoading(false);\r\n    setGameOver(false);\r\n  };\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!gameOver) {\r\n      const answer = e.currentTarget.value;\r\n      const correct = questions[number].correct_answer === answer;\r\n      if (correct) setScore((prev) => prev + 1);\r\n      const answerObject = {\r\n        question: questions[number].question,\r\n        correctAnswer: questions[number].correct_answer,\r\n        answer,\r\n        correct\r\n      };\r\n      setUserAnswers((prev) => [...prev, answerObject]);\r\n    }\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (number < TOTAL_QUESTIONS - 1) setNumber((prev) => prev + 1);\r\n    else setComplete(true);\r\n  };\r\n\r\n  const handleDifficulty = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setDifficulty(e.target.value);\r\n  };\r\n\r\n  console.log(number);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Wrapper>\r\n        <h1>React Typescript Quiz</h1>\r\n        {complete && <div className=\"complete\">Quiz is complete</div>}\r\n\r\n        {gameOver || complete ? (\r\n          <>\r\n            <button className=\"start\" onClick={startQuiz}>\r\n              Start Quiz\r\n            </button>\r\n            <p>Select Difficulty</p>\r\n            <select value={difficulty} onChange={handleDifficulty}>\r\n              {Object.keys(Difficulty).map((key) => (\r\n                <option key={key} value={Difficulty[key]}>\r\n                  {key}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </>\r\n        ) : null}\r\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\r\n        {loading ? <img src={Loader} alt=\"loading\" /> : null}\r\n        {!loading && !gameOver && !complete && (\r\n          <QuestionCard\r\n            questionNum={number + 1}\r\n            question={questions[number].question}\r\n            answers={questions[number].answers}\r\n            totalQuestions={TOTAL_QUESTIONS}\r\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n            callback={checkAnswer}\r\n          />\r\n        )}\r\n\r\n        {!loading && !gameOver && !complete && !!userAnswers[number] && (\r\n          <button className=\"next\" onClick={handleNext}>\r\n            Next Question\r\n          </button>\r\n        )}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}